" -----------------------------------------------------------------------------
"      Filename: vimrc
"      Author: Alex Carney - with a lot of help from the internet
"
"      Created: 12/01/14
"      Last Modified: 27/08/14
"
" -----------------------------------------------------------------------------

set nocompatible

"{{{ ---------------------------------------------- Vim Plug ----------------------
"call plug#begin('~/.vim/plugged')

" Function which decides whether or not to comile YCM libs or not
" Taken straight from the vim-plug readme
function! YCMBuild(info)
    " info is a dict with threee fields
    "       - name: name of the plugin
    "       - status: 'installed', 'updated' or 'unchanged'
    "       - force: set when ! version of commands are used (e.g. PlugUpdate!)
    let l:ycm_cmd= "./install.sh --clang-completer --system-libclang"

    if a:info.status == 'installed' || a:info.force
        execute "!" . l:ycm_cmd
    endif
endfunction

"Plug 'altercation/vim-colors-solarized'
"Plug 'bling/vim-airline'
"Plug 'godlygeek/tabular',  {'on' : 'TagbarToggle'}
"Plug 'majutsushi/tagbar'
"Plug 'mhinz/vim-signify'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'Raimondi/delimitMate'
"Plug 'samsonw/vim-task'
"Plug 'scrooloose/syntastic'
"Plug 'Shougo/unite.vim'
"Plug 'Shougo/unite-outline'
"Plug 'Shougo/vimproc.vim'
"Plug 'SirVer/ultisnips'
"Plug 'tpope/vim-abolish'
"Plug 'tpope/vim-commentary'
"Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-vinegar'
"Plug 'Valloric/YouCompleteMe', {'do' : function('YCMBuild') }
"Plug 'vim-scripts/a.vim'
"Plug 'vimwiki/vimwiki'

"call plug#end()

" Enable filetype plugins"
filetype plugin indent on

" Set the leader character to ,
let mapleader = ','

" Think about setting a local leader as well
" let maplocalleader = '\\'
set tm=500

" Make backspace behave
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

let g:mapleader = ','

" Don't redraw while executing macros (should boost performance)
set lazyredraw
" }}}

" ----------------------------------- Colours -------------------------- {{{

syntax enable                          " Turn on syntax highlighting

"let g:solarized_termtrans = 1
set background=dark
"colorscheme solarized

" Overriding vim's comment highlighting defintion to make it italic
hi Comment term=italic cterm=italic

" }}}

" ----------------------------------- Tab Settings --------------------- {{{

set expandtab                          " Insert spaces instead of tab characters
set tabstop=4                          " Tabs are equal to 4 spaces
set softtabstop=4                      " Allows navigation as if the tab characters are there
set autoindent                         " Automatically match indentation of previous line
set smartindent                        " Automatically indent new code blocks
set nowrap                             " Don't wrap long lines
set shiftround                         " I think this should help making indents more consistent

" This let's you indent/unindent blocks of code using the </> keys repectively
" while in visual mode
set shiftwidth=4
" }}}

" ----------------------------------- Editing -------------------------- {{{

" Convert a word to uppercase
nnoremap <C-u> gUiw
inoremap <C-u> <esc>gUiwea

" Reselect previous visual selection
nnoremap <leader>V V`]

" The opposite of J Splits the line
nnoremap S i<CR><esc><right>
" }}}

" ----------------------------------- Searching ------------------------ {{{

set ignorecase                         " Ignore case when searching
set smartcase                          " Apparently vim tries to be smart here
set hlsearch                           " Highlight matches
set incsearch                          " Cycle through matches in a loop

" When cycling through search results keep the matches in the centre of the
" screen
nnoremap n nzzzv
nnoremap N Nzzzv

" Open a quickfix window for the last search
nnoremap <silent> <leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Open a quickfix window containing a list of todos for the current file
nnoremap <leader>t :vimgrep /TODO/j %<CR>:cw<CR>
" }}}

" ----------------------------------- Interface ------------------------ {{{

set number                             " Enable line numbers
set mouse=a                            " Enable mouse support
set ruler                              " Show cursor position
set showmatch                          " Highlight matching brackets
set noerrorbells                       " Disable annoying beeps
set visualbell
set scrolloff=5                        " Keep more of the file visible while scrolling
set splitbelow                         " Makes using splits more intuitive since the splits happen in the right direction
set splitright
set autowriteall                       " Basically autosave whenever we try to quit vim, open new files, swap buffers around etc.
set autoread
set title                              " Set the title of the window to the current file being edited
set noswapfile                         " Disable those pescky *.swp files

" }}}

" ------------------------------------ Folding --------------------------- {{{

" Use markers for folding
set foldmethod=marker

" Open a file with all folds closed
set foldlevelstart=0

" Use spacebar to toggle a fold
nnoremap <Space> za
vnoremap <Space> za

" Close all other folds except for the current one
nnoremap <leader>z zMzvzz

" Make folds a bit nicer to the eye
hi Folded ctermbg=none

" }}}

" ------------------------------------ Auto Commands --------------------- {{{

" Automatically save when vim loses focus
au FocusLost * :wa  " Apparently this doesnt work in terminal vim?

" Resize splits when vim is resiszed
au VimResized * exe "normal! \<c-w>="

" A few filetypes should be recognised
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.h set filetype=c
au BufRead,BufNewFile *.tex set filetype=tex
au BufRead,BufNewFile *.gradle set filetype=groovy

" }}}

" ------------------------------------ Misc ------------------------------- {{{

" Show trailing whitespace characters
set listchars=tab:>-,trail:.

set list
nnoremap <silent> <leader>l :set list! <CR>

" Highlight a column when I go over a certain width
highlight ColorColumn ctermbg=cyan
call matchadd('ColorColumn', '\%126v', 100)

" Be mean and force myself to use hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Alter vim's buffer switching behavoir
set switchbuf = "useopen,usetab"

" Easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Easier tab navigation
nnoremap <S-l> gt
nnoremap <S-h> gT

" Make backspace behave
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Statusline
set laststatus=2
set statusline=\ %t%m%y%r%h\ %w\ \ \ Line:\ %l\ Col:\ %c
hi statusline ctermfg=16 ctermbg=231

" Highlight current line
hi CursorLine ctermbg=16 cterm=NONE
set cursorline
" }}}

" ----------------------------------- Leader shortcut commands  ----------- {{{
nnoremap <leader>w :w<CR>                       " Quicksave
nnoremap <leader>r :so /home/alex/.vimrc<CR>    " Reload vimrc 
nnoremap <silent> <leader><CR> :noh<CR>          " Clear search match highlights
nnoremap <leader>c :set cursorline! <CR>    " Toggle highlighting of the current line

" Spell Checking
nnoremap <leader>ss :setlocal spell!<CR>  " Toggle spell checking
nnoremap <leader>s? z=                    " Give spelling suggestions
nnoremap <leader>sn ]s                    " Search for the next wrong word
nnoremap <leader>sp [s                    " Search for the previous bad word

nnoremap <leader>m ;call Toggle_task_status()<CR>

" }}}

"----------------------------------- Functions -------------------------- {{{

" }}}

" ------------------------------- Plugin Config -------------------- {{{

" Unite.vim


" Use fuzzy search by default
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])

" Open a list of buffers
"nnoremap <leader>b :Unite -start-insert buffer<CR>

" Open a list of bookmarked files
"nnoremap <leader>bm :Unite -start-insert bookmark<CR>

" Netrw (File Browser)
"let g:netrw_liststlye=0
"let g:netrw_banner=0
"let g:netrw_altv=1              "Open files on the right please
"let g:netrw_preview=1
"let g:netrw_list_hide='^\..*$'  " Dont show hidden files
"let g:netrw_browse_split=0      " Open files in the same window

" Toggle the tagbar
"nnoremap <F8> :TagbarToggle<CR>

" Fugitive commands (Git integration)
"nnoremap <F2> :Gstatus<CR>
"nnoremap <F3> :Gcommit<CR>

" Make syntastic automatically open the error box when errors are detected
"let g:syntastic_auto_loc_list = 0

" Ultisnips settings
"let g:snips_author = "Alex Carney"

"let g:ycm_add_preview_to_completeopt = 1 " Open the preview window when giving semantic completions
"let g:ycm_autoclose_preview_window_after_insertion = 1 " Close the preview after leaving insert mode

" Some Syntastic Integraion Settings
"let g:ycm_warning_symbol = '!'
"let g:ycm_error_symbol = '!!'


"let g:ycm_key_list_select_completion=['<tab>']
"let g:ycm_key_list_previous_completion=['<C-p>']

" Since UltiSnips and YouCompleteMe fight over tab lets change that
"let g:UltiSnipsExpandTrigger="<s-tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-j>"
"let g:UltiSnipsJumpBackwardTrigger="<c-k>"
"let g:UltiSnipsListSnippets="<c-s-tab>"

" Airline
"set noshowmode " Since airline shows the mode for us we no longer need vim to show it as well

"let g:airline#extensions#tabline#enabled = 1 " Display buffers for us when we are only using one tab, or all the tabs in a nice pretty format
"let g:airline_theme='badwolf'
"let g:airline_powerline_fonts = 1

" Vimwiki Settings
"let wiki = {}
"let wiki.path = '~/Documents/Wikis/'

"let g:vimwiki_list = [wiki]
" }}}
