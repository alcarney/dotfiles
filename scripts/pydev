#!/usr/bin/env python3
import argparse
import logging
import os
import subprocess

LOG_LEVELS = [
    (logging.INFO, "%(message)s"),
    (logging.DEBUG, "[%(levelname)s]: %(message)s"),
]
log = logging.getLogger(__name__)

def init_logging(verbose, quiet):
    """Initialise the logging system."""

    if quiet or verbose < 0:
        return

    try:
        level, fmt = LOG_LEVELS[verbose]
    except IndexError:
        level, fmt = LOG_LEVELS[-1]

    console = logging.StreamHandler()
    console.setFormatter(logging.Formatter(fmt))

    log.setLevel(level)
    log.addHandler(console)
def do_search(pattern, venv=None, pkg=None, project=False):
    cmd = ["rg", pattern]

    if venv is not None:
        path = os.path.join(venv, "lib", "python3.7", "site-packages")

        if pkg is not None:
            path = os.path.join(path, pkg)

    if not project:
        cmd.append(path)

    log.debug("Running command: %s", " ".join(cmd))
    subprocess.run(cmd)

cli = argparse.ArgumentParser(description="Utilities for python development")
cli.add_argument(
    "-v",
    "--verbose",
    action="count",
    default=0,
    help="increase the verbosity of the logging output"
)
cli.add_argument(
    "-q", "--quiet", action="store_true", help="suppress any logging output"
)

commands = cli.add_subparsers(title="commands")
search = commands.add_parser("search", help="search for a given pattern")
search.add_argument("pattern", type=str, help="the pattern to search for")
search.add_argument(
    "-p", "--pkg", type=str, default=None, help="search within a given package"
)
search.add_argument(
    "--project", action="store_true", help="restrict search to the project's codebase"
)
search.add_argument(
    "--venv", default=".dev", help="search in the given virtual environment"
)
search.set_defaults(run=do_search)

def main():
    namespace = cli.parse_args()

    exclude = ["run", "verbose", "quiet"]
    args = {k: v for k, v in vars(namespace).items() if k not in exclude}

    init_logging(namespace.verbose, namespace.quiet)

    if hasattr(namespace, "run"):
        namespace.run(**args)
    else:
        cli.print_help()

if __name__ == "__main__":
    main()
