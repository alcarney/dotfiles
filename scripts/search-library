#!/usr/bin/env python
import argparse
import os
import subprocess
import sys


def format_rg_args(query: str, directory: str) -> list[str]:
    ...


def format_grep_args(query: str, directory: str) -> list[str]:
    return [query, directory]


def run_query(query: str, directory: str):

    # First try rg
    search_programs = {'rg': format_rg_args, 'grep': format_grep_args}
    for program, fmt_args in search_programs.items():

        result = subprocess.run(['command', '-v', program], capture_output=True)
        if result.returncode == 0:
            cmd = [
                result.stdout.decode('utf8').strip(),
                *fmt_args(query, directory)
            ]
            print(f'Running command: {" ".join(cmd)}')

            subprocess.run(cmd)
            return

    print("Unable to find search program", file=sys.stderr)


def search_package(package: str, query: str) -> None:

    directory = None

    venv = os.environ.get('VIRTUAL_ENV', None)
    if venv is not None:
        directory = f"{venv}/lib/python3.10/site-packages/{package}"


    if directory is None:
        print(f"Unable to search package '{package}' in this context.")
        return

    run_query(query, directory)


cli = argparse.ArgumentParser(description="my frontend to search tools like rg.")
cli.add_argument("query", help="the search terms")
cli.add_argument("-p", "--package", help="search within the given package")

if __name__ == '__main__':
    args = cli.parse_args()
    search_package(**args.__dict__)
