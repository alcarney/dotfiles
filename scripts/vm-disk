#!/usr/bin/env python
import argparse
import logging
import subprocess

LOG_LEVELS = [
    (logging.INFO, "%(message)s"),
    (logging.DEBUG, "[%(levelname)s]: %(message)s"),
]
log = logging.getLogger(__name__)

def init_logging(verbose, quiet):
    """Initialise the logging system."""

    if quiet or verbose < 0:
        return

    try:
        level, fmt = LOG_LEVELS[verbose]
    except IndexError:
        level, fmt = LOG_LEVELS[-1]

    console = logging.StreamHandler()
    console.setFormatter(logging.Formatter(fmt))

    log.setLevel(level)
    log.addHandler(console)
def do_create(filename, size):
    """Create a new vm disk image"""
    imagename = f"{filename}.cow"
    cmd = ["qemu-img", "create", "-f", "qcow2", imagename, size]

    log.debug("Running command: %s", " ".join(cmd))
    subprocess.run(cmd)

cli = argparse.ArgumentParser(description="Utilities for managing vm disk images")
commands = cli.add_subparsers(title="commands")

cli.add_argument(
    "-v",
    "--verbose",
    action="count",
    default=0,
    help="increase the verbosity of the logging output"
)
cli.add_argument(
    "-q", "--quiet", action="store_true", help="suppress any logging output"
)
create = commands.add_parser("create", help="create a new vm disk image")
create.add_argument("filename", type=str, help="the filename to give the image")
create.add_argument(
    "--size", type=str, default="20G", help="the disk space to allocate to the image"
)
create.set_defaults(run=do_create)

def main():
    namespace = cli.parse_args()

    exclude = ["run", "verbose", "quiet"]
    args = {k: v for k, v in vars(namespace).items() if k not in exclude}

    init_logging(namespace.verbose, namespace.quiet)

    if hasattr(namespace, "run"):
        namespace.run(**args)
    else:
        cli.print_help()

if __name__ == '__main__':
    main()
