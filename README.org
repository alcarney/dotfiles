#+TITLE: Dotfiles

This is a another attempt at me "literate programmatising" my dotfile
configuration. I have no idea how long it will last

*Dependencies*

In order to setup everything here the following packages need to be installed

#+BEGIN_SRC bash :tangle install.sh :shebang #!/bin/bash
sudo pacman -S \
    rofi                  # Used to launch applications, switch windows and more!
    sxiv                  # Used to do select new wallpapers (and hence themes)

pikaur -S \
    i3-gaps-rounded-git   # Fork of i3-gaps that adds support for rounded corners
    polybar               # Displays the bar of the top of the screen.
#+END_SRC

* Bar

Here we define the overall structure of the main configuration file.
#+BEGIN_SRC conf :noweb yes :tangle polybar/config
<<polybar-colors>>

<<polybar-main>>

<<polybar-modules>>
#+END_SRC

This script is used to launch the bar, this allows for easier iteration on the
configuration since if an instance of the bar is already running it will kill it
before launching a new one.

#+BEGIN_SRC bash :tangle polybar/launch.sh :shebang #!/bin/bash
killall -q polybar

while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done

polybar main&
#+END_SRC

Configure ~i3~ to launch the bar on startup

#+NAME: i3-startup
#+BEGIN_SRC conf
exec_always --no-startup-id $HOME/.config/polybar/launch.sh
#+END_SRC

** Bars

At the moment I'm only using the one bar at the top of the screen.

#+NAME: polybar-main
#+BEGIN_SRC conf
[bar/main]
width = 100%
height = 18
padding-right = 1
module-margin = 1

font-0 = siji:pixelsize=9
font-1 = fontawesome-webfont:pixelsize=11

background = ${colors.background}
foreground = ${colors.foreground}

modules-right = battery0 battery1 wireless volume clock
modules-center = i3
modules-left = wallpaper cpu ram filesystem
#+END_SRC

** Modules

With the main bar defined, it's time to define each of the modules that it is
comprised of.

*** Battery

Since I have two batteries in my laptop I require two battery module definitions

#+NAME: polybar-modules
#+BEGIN_SRC conf :noweb yes
[module/battery0]
type = internal/battery
battery = BAT0

<<polybar-battery-settings>>

[module/battery1]
type = internal/battery
battery = BAT1

<<polybar-battery-settings>>
#+END_SRC

With the following settings common to both.

#+NAME: polybar-battery-settings
#+BEGIN_SRC conf
format-charging = <animation-charging> <label-charging>
format-charging-padding = 1

format-discharging = <ramp-capacity> <label-discharging>
format-discharging-padding = 1

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

#+END_SRC

*** Clock

Telling the time

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/clock]
type = internal/date
date = %H:%M

format =  <label>
format-padding = 1

#+END_SRC

*** CPU

Keeping track of how hard the computer is working.

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/cpu]
type = internal/cpu

format = <ramp-coreload>
format-padding = 2

ramp-coreload-0 = ▁
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇
ramp-coreload-7 = █

#+END_SRC

*** Filesystem

Making sure we don't run out of disk space

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/filesystem]
type = internal/fs

mount-0 = /
mount-1 = /home

format-mounted = <label-mounted>
format-mounted-padding = 2

label-mounted =  %mountpoint% %percentage_used%%

#+END_SRC

*** i3

This module visualises which i3 workspace I am currently using

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/i3]
type = internal/i3
format = <label-state> <label-mode>
index-sort = true

label-mode = %mode%

label-focused = %icon%
label-focused-background = ${colors.primary}
label-focused-padding = 2

label-unfocused = %icon%
label-unfocused-padding = 2

label-urgent = %icon%
label-urgent-background = ${colors.secondary}
label-urgent-padding = 2

ws-icon-0 = 1;
ws-icon-1 = 2;
ws-icon-2 = 3;
ws-icon-3 = 4;
ws-icon-default = 
strip-wsnumbers = true

#+END_SRC

*** Ram

How else could we shake our heads at all the RAM our electron apps are using?

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/ram]
type = internal/memory

format =  <label>
format-padding = 2

label = %percentage_used%%

#+END_SRC

*** Volume

Let's turn it up!

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/volume]
type = internal/alsa

label-volume =  %percentage%
label-volume-background = ${colors.background}
label-volume-padding = 1

label-muted =  
label-muted-background = ${colors.background}
label-muted-padding = 1

#+END_SRC

*** Wallpaper

This shows the change wallpaper icon, which when clicked will pick a new
wallpaper

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/wallpaper]
type = custom/script
exec = $HOME/.config/polybar/wallpaper-icon
interval = 300
click-left = $HOME/.config/polybar/wallpaper-change

#+END_SRC

This relies on two bash scripts, the first is trivial and simply echoes the icon
so that it shows up in the bar.

#+BEGIN_SRC bash :tangle polybar/wallpaper-icon :shebang #!/bin/bash
echo ""
#+END_SRC

The other script is also relatively simple, it uses ~sxiv~ to allow me to select
a wallpaper from my my wallpapers directory and passes it to ~pywal~ and
~betterlockscreen~.

#+BEGIN_SRC bash :tangle polybar/wallpaper-change :shebang #!/bin/bash
DIR=$HOME/Media/Wallpapers
image=$(sxiv -o -t -b $DIR)

wal-set $image                                                                # Set the image as the background and recalculate the colorscheme
betterlockscreen -u $image                                                    # Update the image used on the lockscreen
notify-send -i $image "$(basename $image)" "Wallpaper & Lock Screen Updated"  # Send a notification when done.
#+END_SRC

*** Wifi

Show what wifi network we are currently connected to.

#+NAME: polybar-modules
#+BEGIN_SRC conf
[module/wireless]
type = internal/network
interface = wlp4s0

label-connected =   %essid%
label-connected-background = ${colors.background}
label-connected-padding = 1

#+END_SRC

* Colours

Where possible I have a consistent colour scheme automatically generated based
on my current wallpaper courtesy of the fantastic [[https://github.com/dylanaraps/pywal][pywal]] project. Keeping colour
configurations up to date and in sync it warrants its own dedicated config section.

** Bar

I'm not entirely sure of how this hangs together but ~pywal~ seems to be updating
~Xresources~ behind the scenes so we can pull the colours from there into ~polybar~.

#+NAME: polybar-colors
#+BEGIN_SRC conf
[colors]
background = ${xrdb:color0:#222}
foreground = ${xrdb:color15:#fff}
primary = ${xrdb:color2:#222}
secondary = ${xrdb:color1:#222}
#+END_SRC

** i3

~i3~ can also load its colours from Xresources so updating the colorscheme is
nice and easy

#+NAME: i3-colors
#+BEGIN_SRC conf
set_from_resource $pri i3wm.color2  #ffffff
set_from_resource $bg  i3wm.color0  #000000
set_from_resource $fg  i3wm.color7  #dddddd

# class                  border  backgr.  text  indicator  child_border
client.focused           $bg     $bg      $fg   $bg        $bg
client.focused_inactive  $bg     $bg      $fg   $bg        $bg
client.unfocused         $bg     $bg      $fg   $bg        $bg
client.urgent            $bg     $bg      $fg   $bg        $bg
client.placeholder       $bg     $bg      $fg   $bg        $bg

client.background        $bg
#+END_SRC

We can also configure ~i3~ to call ~pywal~ to restore the wallpaper and colour
configuration on startup

#+NAME: i3-startup
#+BEGIN_SRC conf
exec --no-startup-id wal -R
#+END_SRC

** Terminal

Setting colours for the terminal is easy enough, just reference the generated
config file.

#+NAME: kitty-colors
#+BEGIN_SRC conf
include ~/.cache/wal/colors-kitty.conf
#+END_SRC

* i3

#+BEGIN_SRC conf :tangle i3/config :noweb yes
set $mod Mod4

# Looks
font pango:monospace 8

default_border pixel 10
border_radius 5
gaps outer 10
gaps inner 10

<<i3-colors>>

# Keybindings
<<i3-lifecycle-keys>>
<<i3-rofi-keys>>
<<i3-scratchpad-keys>>
<<i3-terminal-keys>>
<<i3-window-keys>>
<<i3-workspace-keys>>

# Startup
<<i3-startup>>
#+END_SRC

** Life Cycle

Keybindings that manage the life cycle of ~i3~

#+NAME: i3-lifecycle-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+c reload
bindsym $mod+Shift+r restart
#+END_SRC

and the system

#+NAME: i3-lifecycle-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+x exec betterlockscreen -l dimblur
#+END_SRC

** Scratchpad

The [[https://i3wm.org/docs/userguide.html#_scratchpad][Scratchpad]] is a *fantastic* feature of ~i3~ think of it as a dropdown
terminal but it can work for *any* application! To move a window to the
scratchpad simply use the following keybinding

#+NAME: i3-scratchpad-keys
#+BEGIN_SRC conf
bindsym $mod+i move scratchpad
#+END_SRC

This will make the window disappear, to bring it back simply press the
complementary keybinding

#+NAME: i3-scratchpad-keys
#+BEGIN_SRC conf
bindsym $mod+o scratchpad show
#+END_SRC

Et voila! Instant "dropdown" applications

** Window Management

Since ~i3~ is a window manager it would be good to set up some keys that manage
windows!

#+NAME: i3-window-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+q kill
#+END_SRC

*Window Focus*

#+NAME: i3-window-keys
#+BEGIN_SRC conf
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

bindsym $mod+a focus parent
bindsym $mod+s focus child
#+END_SRC

*Window Movement*

#+NAME: i3-window-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right
#+END_SRC

*Window Layout*

#+NAME: i3-window-keys
#+BEGIN_SRC conf
bindsym $mod+b split h
bindsym $mod+v split v

bindsym $mod+q layout stacking
bindstm $mod+w layout tabbed
bindsym $mod+e layout toggle split
#+END_SRC

*Floating Windows*

This binding will switch between floating / tiled mode for the focused window.

#+NAME: i3-window-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+space floating toggle
#+END_SRC

This binding will switch focus between floating / tiled windows.

#+BEGIN_SRC conf
bindsym $mod+space foccs mode_toggle
#+END_SRC

Setting this allows floating windows to be dragged around by the mouse

#+NAME: i3-window-keys
#+BEGIN_SRC conf
floating_modifier $mod
#+END_SRC

*Resizing Windows*

~i3~ has the concept of [[https://i3wm.org/docs/userguide.html#binding_modes][modes]], the next set of bindings use this concept to
create a mode in which we can resize windows while it is active

#+NAME: i3-window-keys
#+BEGIN_SRC conf
mode "resize" {
        bindsym h resize shrink width 10 px or 10 ppt
        bindsym j resize grow height 10 px or 10 ppt
        bindsym k resize shrink height 10 px or 10 ppt
        bindsym l resize grow width 10 px or 10 ppt

        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"
#+END_SRC

** Workspaces

As well as managing windows ~i3~ can provide us with a number of virtual
desktops called workspaces to help organise windows further.

*Workspace Definitions*

#+NAME: i3-workspace-keys
#+BEGIN_SRC conf
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"
#+END_SRC

*Workspace Switching*

#+NAME: i3-workspace-keys
#+BEGIN_SRC conf
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10
#+END_SRC

This handy setting also allows us to jump back to the workspace we came from if
we press the same key combo twice.

#+NAME: i3-workspace-keys
#+BEGIN_SRC conf
workspace_auto_back_and_forth yes
#+END_SRC

*Send to Workspace*

These bindings allow us to send the focused window to another workspace.

#+NAME: i3-workspace-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10
#+END_SRC

* Miscellaneous

Odds and ends with no other home yet are configured here.

** X11
*** Xinitrc

This file is called when we invoke ~startx~ and is responsible setting various
configurations before i3 is invoked.

#+BEGIN_SRC sh :tangle xinitrc
#! /bin/sh

# Not entirely sure what this does but it seems important.
if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x "$f" ] && . "$f"
  done
  unset f
fi

# Use settings in the .Xresources file
xrdb -merge ~/.Xresources

# Disable beeping
xset b off

# Set GB layout, remap CAPS to ESC
setxbmap -layout gb -option caps:escape

# Disable page up / page down keys on my laptop.
xmodmap -e "keycode 166="
xmodmap -e "keycode 167="

# Set the cursor
xsetroot -cursor_name left_ptr

# Start i3
exec i3
#+END_SRC

* Rofi

[[https://github.com/davatorium/rofi][Rofi]] is a great application launcher, window switcher and general purpose "select
from list of things" program

** Config

Using a configuration file we can avoid most of the command line arguments

#+BEGIN_SRC css :tangle rofi/config.rasi
configuration {
    display-run: "> ";
}

window {
    location: west;
    anchor: west;
    height: 100%;
    width: 25%;
    orientation: horizontal;
    children: [mainbox];
}

mainbox {
    spacing: 0.8em;
    children: [entry, listview];
}

listview {

}
#+END_SRC

** Bindings

These bindings are used to launch ~rofi~ in various modes under ~i3~

*Launch Application*

#+NAME: i3-rofi-keys
#+BEGIN_SRC conf
bindsym $mod+Shift+Return exec rofi -show run
#+END_SRC

*Raise Window*

#+NAME: i3-rofi-keys
#+BEGIN_SRC conf
bindsym $mod+Tab exec rofi -show window
#+END_SRC

* Terminal

[[https://sw.kovidgoyal.net/kitty/][kitty]] seems to be gaining popularity as a terminal emulator and seems nice
enough with nice features like GPU rendering. The configuration itself is
trivial (at least for now) just setting the font and the colours

#+BEGIN_SRC conf :noweb yes :tangle kitty/kitty.conf
font_size 9
font_family Iosevka

<<kitty-colors>>
#+END_SRC

The terminal can be launched by hitting ~Windows+Enter~ under ~i3~

#+NAME: i3-terminal-keys
#+BEGIN_SRC conf
bindsym $mod+Return exec kitty
#+END_SRC
